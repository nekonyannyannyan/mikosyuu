<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>巫女インベーダー（クリア演出つき）</title>
  <style>
    body {
      margin: 0;
      background: black;
      color: white;
      font-family: sans-serif;
      text-align: center;
      position: relative;
    }
    canvas {
      background: #111;
      display: block;
      margin: auto;
      border: 2px solid white;
      width: 100%;
      max-width: 600px;
      height: 500px;
    }
    .controls {
      display: flex;
      justify-content: center;
      margin-top: 10px;
      flex-wrap: wrap;
    }
    .controls button {
      font-size: 20px;
      padding: 10px;
      margin: 5px;
      width: 100px;
    }
    .instruction {
      margin-top: 10px;
      font-size: 16px;
      color: #ccc;
    }
    .clear-screen {
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.85);
      display: none;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      color: white;
      font-size: 20px;
      padding: 20px;
      z-index: 10;
    }
    .clear-screen img {
      max-width: 80%;
      max-height: 60vh;
      margin-bottom: 20px;
      border: 4px solid white;
    }
    @media (min-width: 768px) {
      .touch-buttons {
        display: none;
      }
    }
  </style>
</head>
<body>
  <h1>?? 巫女インベーダー</h1>
  <canvas id="game" width="300" height="400"></canvas>

  <div class="controls touch-buttons">
    <button id="left">←</button>
    <button id="shoot">撃つ</button>
    <button id="right">→</button>
    <button id="retry">リトライ</button>
  </div>

  <div class="instruction">
    【PC】← → / スペース：撃つ / Shift：ゆっくり / R：リトライ<br>
    【スマホ】ボタンで操作
  </div>

  <!-- 画像読み込み -->
  <img id="playerImg" src="miko san.png" style="display:none;" />
  <div class="clear-screen" id="clearScreen">
    <img src="チャットGPT君の全力.png" alt="Clear Image">
    <div>Clear！！おめでとう??<br>これはチャットGPT君による本気で媚びた画像だよ</div>
  </div>

  <script>
    const canvas = document.getElementById("game");
    const ctx = canvas.getContext("2d");
    const clearScreen = document.getElementById("clearScreen");

    const player = { x: 130, y: 370, w: 32, h: 32 };
    const hitboxSize = 8;
    let bullets = [];
    let canShoot = true;

    let invaders = [];
    let invaderBullets = [];
    let invaderDir = 2;

    const keys = {};
    let gameOver = false;
    let gameCleared = false;

    const playerImg = document.getElementById("playerImg");

    function initGame() {
      player.x = 130;
      bullets = [];
      canShoot = true;
      invaderBullets = [];
      invaderDir = 2;
      gameOver = false;
      gameCleared = false;
      clearScreen.style.display = "none";

      invaders = [];
      for (let y = 0; y < 3; y++) {
        for (let x = 0; x < 6; x++) {
          invaders.push({ x: 30 + x * 40, y: 30 + y * 30, w: 20, h: 20 });
        }
      }
    }

    document.addEventListener("keydown", e => {
      keys[e.key] = true;
      if (e.key === " ") shoot();
      if (e.key === "r" || e.key === "R") retry();
    });
    document.addEventListener("keyup", e => keys[e.key] = false);

    document.getElementById("left").addEventListener("touchstart", () => keys["ArrowLeft"] = true);
    document.getElementById("left").addEventListener("touchend", () => keys["ArrowLeft"] = false);
    document.getElementById("right").addEventListener("touchstart", () => keys["ArrowRight"] = true);
    document.getElementById("right").addEventListener("touchend", () => keys["ArrowRight"] = false);
    document.getElementById("shoot").addEventListener("touchstart", shoot);
    document.getElementById("retry").addEventListener("touchstart", retry);

    function shoot() {
      if (canShoot && !gameOver && !gameCleared) {
        bullets.push({ x: player.x + player.w / 2 - 1, y: player.y });
        canShoot = false;
        setTimeout(() => canShoot = true, 400);
      }
    }

    function retry() {
      initGame();
    }

    function update() {
      if (gameOver || gameCleared) return;

      const moveSpeed = keys["Shift"] ? 2 : 5;
      if (keys["ArrowLeft"] && player.x > 0) player.x -= moveSpeed;
      if (keys["ArrowRight"] && player.x < canvas.width - player.w) player.x += moveSpeed;

      bullets.forEach(b => b.y -= 8);
      bullets = bullets.filter(b => b.y > 0);

      invaderBullets.forEach(b => b.y += 5);
      invaderBullets = invaderBullets.filter(b => b.y < canvas.height);

      for (let b of invaderBullets) {
        const cx = player.x + player.w / 2;
        const cy = player.y + player.h / 2;
        if (
          b.x > cx - hitboxSize / 2 &&
          b.x < cx + hitboxSize / 2 &&
          b.y > cy - hitboxSize / 2 &&
          b.y < cy + hitboxSize / 2
        ) {
          gameOver = true;
          setTimeout(() => alert(" ゲームオーバー！"), 100);
        }
      }

      let hitEdge = false;
      for (let inv of invaders) {
        inv.x += invaderDir;
        if (inv.x < 0 || inv.x + inv.w > canvas.width) hitEdge = true;
      }
      if (hitEdge) invaderDir *= -1;

      for (let i = 0; i < 3; i++) {
        if (Math.random() < 0.2) {
          const r = invaders[Math.floor(Math.random() * invaders.length)];
          if (r) {
            invaderBullets.push({ x: r.x + r.w / 2, y: r.y + r.h });
          }
        }
      }

      for (let i = invaders.length - 1; i >= 0; i--) {
        for (let j = bullets.length - 1; j >= 0; j--) {
          const inv = invaders[i];
          const b = bullets[j];
          if (b.x > inv.x && b.x < inv.x + inv.w && b.y > inv.y && b.y < inv.y + inv.h) {
            invaders.splice(i, 1);
            bullets.splice(j, 1);
            break;
          }
        }
      }

      if (invaders.length === 0 && !gameCleared) {
        gameCleared = true;
        clearScreen.style.display = "flex";
      }
    }

    function draw() {
      ctx.clearRect(0, 0
